17-05-2025
To run the js file in nodejs env i.e on backend run command
node <filename>
non blocking IO

npm i axios
npm i package-name

Modules : Library/Package (Utility)
1. Built In  : Part of nodejs
2. Third party : npmjs.com

Import/Export
ESM => import React from "react"; export default Header;
CJS => const React = require("react"); module.exports = Header;

Built In
1. fs => File System CRUD
--------------------------------------------------------------------------------------------
19-05-2025

Processes
1. Parent : OS process
2. Child : Application process


How to create a nodejs project
npm init -> Answer basic questions in the cli

--------------------------------------------------------------------------------------------
20-05-2025

Steps to publish a package on npmjs.com
1. Create an account/login on npmjs.com
2. Create a project from scratch in your system (npm init)
3. npm login -> In CLI
4. npm publish

HTTP Status Code
1xx => Informational
2xx => Success (200, 201, 204)
3xx => Redirectional
4xx => Client Error (400 => ,401 => ,403 => Forbidden (Insufficent Permission/Not allowed ),404 => Not found, 429 => Too many requests)
5xx => Server Error (500, 501, 502, 503)

Web Scrapping => Bot


--------------------------------------------------------------------------------------------
22-05-2025

Excel file -> xlsx file
Excel sheet
Rows & Cols


Pre requisit for API
1. End Point -> URL (http://jsonplaceholder.com/api/todos/list)
2. HTTP Method -> GET, POST, PUT, PATCH, DELETE etc

--------------------------------------------------------------------------------------------
23-05-2025

GET => When server is sending data to client on their request (Fetching)
POST => When client is sending data to the server (Create)

API 1 = /todos GET => Fetch the list of all todos
API 2 = /todos POST => Creating a new todo

npm i -g nodemon -> Hot reloading for nodejs

API => Connector

Web API
REST API => JSON [{id: 1, name: "abcd", image: "http://abcd.com/xyz.jpg"}]
SOAP API => XML <> </>
etc

--------------------------------------------------------------------------------------------
26-05-2025

Middlewares
Level of application
    1. Application level middleware
    2. Router-level middleware
    
Type of handling / PREDEFINED / functionality
    3. Error handling middleware
    4. Built in middleware
    5. Third Party middleware

--------------------------------------------------------------------------------------------
27-05-2025

Path
1 Absolute path : D:\Divyansh\Classes\fs-25-28\module_6\classes\27-05-2025\img\sample.png
2 Relative path : /27-05-2025/img/sample.png

<form method="POST" action="/register">
</form>

--------------------------------------------------------------------------------------------
29-05-2025
Database - MongoDB


CRUD 
C -> Create
db.users.insertOne({...})
db.users.insertMany([{},{}])



--------------------------------------------------------------------------------------------
30-05-2025

R -> Read

MQL

Relational / Comparision Operators

>   $gt
>=  $gte
<   $lt
<=  $lte
==  $eq
!=  $ne

Q. Find all the products in the database collection named "products"
db.<collection-name>.find()
db.products.find()

Q. Find all the products whose price is 27.259995759875096
db.products.find({
    price: 27.259995759875096
})

Q. Find all the products whose price is 743.3653019224372
db.products.find({
    price: 743.3653019224372
})

Q. Find all the products whose price is less than 100
db.products.find({
    price: {
        $lt: 100
    }
}).count()

Q. Find all the products whose price is less than 20
db.products.find({
    price: {
        $lt: 20
    }
})

Q. Find all the products whose price is 600 or more
db.products.find({
    price: {
        $gte: 600
    }
})

Q. Find all the product which has price other than 299
db.products.find({
    price: {
        $ne: 299
    }
})

Q. Find all the product which has price 873.7449146903808
db.products.find({
    price: {
        $eq: 873.7449146903808
    }
})

db.products.find({
    price: 873.7449146903808
})

Logical Operators

&&  $and
||  $or


Q. Find all the products having price in the range of 10 and 30
db.products.find({
    $and: [
        {
            price: {
                $gt: 10
            }
        },
        {
            price: {
                $lt: 30
            }
        }
    ]
})


Q. Find all the product who has price less than 10 or greater than 800
db.products.find({
    $or: [
        {
            price: {
                $lt: 10
            }
        },
        {
            price: {
                $gt: 800
            }
        }
    ]
}).sort({price: 1, rating: -1})

Q. Find all the product whose name is Soft Bamboo Salad

db.products.find({
    name: "Soft Bamboo Salad"
})

RegExp()
/^a{0,10}$/
g => Global (Search in whole string)
i => Case insensitive (Capital & Small letters will be ignored)

Q. Find all the products having "salad" in their name
db.products.find({
    name: /salad/gi
})

Q. Find all the product whose name is salad and price is between 10 and 900
db.products.find({
    $and: [
        {
            name: /salad/gi
        },
        {
            price: {
                $gt: 10
            }
        },
        {
            price: {
                $lt: 50
            }
        }
    ]
})

db.products.find({
    $and: [
        {
            name: /salad/gi
        },
        {
            $or: [
                {},
                {}
            ]
        }
     ]
})

db.products.find({
    name: /salad/gi,
    price: {
        $gt: 10,
        $lt: 50
    }
})

find() => Find all matching items
findOne() => Finds first matching item

U -> Update
Q. Update the price of the product with name "salad" in it to 100

db.<collection-name>.updateOne(findObject, updateObject)
db.<collection-name>.updateMany(findObject, updateObject)

db.products.updateMany(
    {
        name: /salad/gi
    },
    {
        $set : {
            price: 100
        }
    }
)


db.products.delteOne(findObject)
db.products.delteMany(findObject)

db.products.deleteMany({
    price: 100
})

--------------------------------------------------------------------------------------------
02-06-2025

Social Netowrk Project

Feed module
User module
Settings module

Job Application

User module
Job module => CRUD Operation on Job
Admin module
Settings module

// /api/API_VERSION/MODULE_NAME/API_NAME
// /api/v1/job/create

{
    title: "Software Engg - Full stack",
    location: "Indore",
    minExp: 4,
    salary: 1500000,
    description: "Develop full stack web apps in javascript technologies",
    company: "IBM",
    skills: ["react", "node"]
}

{
    title: {
        type: String
    },
    location: {
        type: String
    },
    minExp: {
        type: Number
    },
    salary: {
        type: Number
    },
    description: {
        type: String
    },
    company: {
       type: String
    },
    skills: {
        type: [String]
    }
}

--------------------------------------------------------------------------------------------
05-06-2025

Environment Variables
Email

Job Application => Account Verification, User Registration (Welcome Mail), Apply (Application Mail) etc
http server => Handling internet traffic (req/res) https://
db server => Manages db related activities mongodb://
smtp server => Used to send emails (Simple Mail Transfer Protocol) 
host => localhost 
port => 1234

--------------------------------------------------------------------------------------------
06-06-2025
File Sharing App (Google Drive / One Drive / Dropbox etc)
File Upload
Share a file link
Download / access the file
Learnings : File Upload, Docker
Revisit : Project Structure

Modules
1. File Module 
2. User module (Login/signup)



const onFormSubmit = e => {
	e.prevnetDefault();
const formData = new FormData();

formData.append("username",userNameInput)
formData.append("resume", inputFieldRef.current.target.files[0]);


axios.post("/upload", {
	body: formData
});
}

--------------------------------------------------------------------------------------------
09-06-2025

/files/68431411479f1ae43a54945c
/files/alksdjflaksdf0asdfa0sdfs
/files/f80a8s9dfasd0f90as9dd9dx

<a target="_blank" href="DOWNLOADBLE LINK"> Click here</a>


const mailer = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: "587",
    secure: true,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.USER_PASS
    }
});


docker build -t file_sharing_app:1.0 .
docker run -p 8080:8080 -d file_sharing_app:1.0

--------------------------------------------------------------------------------------------
10-06-2025

eCommerce - My Strore

SDLC (Software Dev Lifecycle)
1. Requirement Gathering
2. Check the feasibility

**UX Engg**
1. Prototype / Wireframes
2. UX Designs / Mockups (Adobe XD, Figma etc)
3. Design Review
4. Design update & finalization

**Development Team**
1. Backend Development
2. Frontend Development

**QA/Tester**
1. Testing Phase / QA (Quality Assurance)

**Product Owner** 
UAT (User Acceptance Testing) - Alpha

**User Testing Phase** - Beta Testing
Feedback

PRODUCTION MODE - LIVE

eCommerce - My Store

1. User Facing WebSite/App
    Frontend
    Backend

2. Seller Facing WebSite/App
    Frontend
    Backend

3. Admin Portal
    Frontend
    Backend

4. Customer Service Portal
    Frontend
    Backend

Scope of work - Seller + Seller (Partially)
Modules : 
1. User Module (Difficult)
    Register
    Login
    Forgot Password
    Reset Password

2. Product Module (Easy)
    CRUD

3. Cart Module / Wishlist Module (Moderate)
    Add to Cart
    Remve from cart etc

4. Checkout Module / Order Module (Moderate + Very Lengthy)
    Place order - Product info, Address Info, Payment gateway
    Order Information - Status of your order

5. Profile module (Very Easy)
    My Orders

6. Review Product (Moderate / Difficult - Small module)
    Add review to a product
    Edit reviews to a product etc

Learnings
    Security
        1. Authetication : JWT
        2. Authorization
    Payment Gateway Integration (Subject to account availability)
    DB Operations
        1. Connecting different collections
        2. Querying different collections at once
    Postman collection
    Rate limiting
    Encryption/Hashing etc

index.js -> route -> controller -> model

--------------------------------------------------------------------------------------------
12-06-2025

Password security

abcd1234 => &*Fs9df8asdf6%&sdf8asdfasdfsdf

Encoding / Decoding => Converting a plain text into equivalent encoded form so that all the systems can understand it (NOT RELATED WITH SECURITY)
Encryption / Decryption => Conversion of plain text into equivalent cipher text using std algorithms like AES, DES, RSA etc - IT IS REVERSIBLE
Hashing => Conversion of plain text into equivalent cipher text using std algorithms - IT IS NOT REVERSIBLE

With login / protected routes
    View my order
    Place order
    Viewing the product